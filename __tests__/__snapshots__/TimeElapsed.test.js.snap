// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TimeElapsed exports 1`] = `[Function]`;

exports[`TimeElapsed renders and accepts children as React Class Component 1`] = `
<Text
  accessible={true}
  allowFontScaling={true}
  ellipsizeMode="tail"
>
  {"secondsElapsed":0}
</Text>
`;

exports[`TimeElapsed renders and accepts children as callable function 1`] = `
<Text
  accessible={true}
  allowFontScaling={true}
  ellipsizeMode="tail"
>
  {"secondsElapsed":0}
</Text>
`;

exports[`TimeElapsed test componentWillMount 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    secondsElapsed={0}
    start={true}
>
    10
</Text>,
  "nodes": Array [
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      secondsElapsed={0}
      start={true}
>
      10
</Text>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TimeElapsed
        start={true}
>
        <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
        >
                10
        </Text>
</TimeElapsed>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TimeElapsed {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "isCountingSeconds": false,
        "props": Object {
          "children": <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
>
            10
</Text>,
          "start": true,
        },
        "refs": Object {},
        "startCounting": [Function],
        "state": Object {
          "secondsElapsed": 0,
        },
        "stopCounting": [Function],
        "timer": Timeout {
          "_called": false,
          "_destroyed": false,
          "_idleNext": Timeout {
            "_called": false,
            "_destroyed": false,
            "_idleNext": TimersList {
              "_idleNext": [Circular],
              "_idlePrev": [Circular],
              "_timer": Timer {
                "0": [Function],
                "_list": [Circular],
              },
              "_unrefed": false,
              "msecs": 1000,
              "nextTick": false,
            },
            "_idlePrev": [Circular],
            "_idleStart": 1015,
            "_idleTimeout": 1000,
            "_onTimeout": [Function],
            "_repeat": 1000,
            "_timerArgs": undefined,
            Symbol(asyncId): 49,
            Symbol(triggerId): 0,
          },
          "_idlePrev": TimersList {
            "_idleNext": [Circular],
            "_idlePrev": Timeout {
              "_called": false,
              "_destroyed": false,
              "_idleNext": [Circular],
              "_idlePrev": [Circular],
              "_idleStart": 1015,
              "_idleTimeout": 1000,
              "_onTimeout": [Function],
              "_repeat": 1000,
              "_timerArgs": undefined,
              Symbol(asyncId): 49,
              Symbol(triggerId): 0,
            },
            "_timer": Timer {
              "0": [Function],
              "_list": [Circular],
            },
            "_unrefed": false,
            "msecs": 1000,
            "nextTick": false,
          },
          "_idleStart": 2944,
          "_idleTimeout": 1000,
          "_onTimeout": [Function],
          "_repeat": 1000,
          "_timerArgs": undefined,
          Symbol(asyncId): 138,
          Symbol(triggerId): 114,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
        "_debugID": 2,
        "_renderedOutput": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TimeElapsed
    start={true}
>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
    >
        10
    </Text>
</TimeElapsed>,
}
`;

exports[`TimeElapsed test componentWillReceiveProps to start counting 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    secondsElapsed={0}
    start={true}
>
    10
</Text>,
  "nodes": Array [
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      secondsElapsed={0}
      start={true}
>
      10
</Text>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TimeElapsed
        start={true}
>
        <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
        >
                10
        </Text>
</TimeElapsed>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TimeElapsed {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "isCountingSeconds": false,
        "props": Object {
          "children": <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
>
            10
</Text>,
          "start": true,
        },
        "refs": Object {},
        "startCounting": [Function],
        "state": Object {
          "secondsElapsed": 0,
        },
        "stopCounting": [Function],
        "timer": Timeout {
          "_called": false,
          "_destroyed": false,
          "_idleNext": Timeout {
            "_called": false,
            "_destroyed": false,
            "_idleNext": Timeout {
              "_called": false,
              "_destroyed": false,
              "_idleNext": Timeout {
                "_called": false,
                "_destroyed": false,
                "_idleNext": TimersList {
                  "_idleNext": [Circular],
                  "_idlePrev": [Circular],
                  "_timer": Timer {
                    "0": [Function],
                    "_list": [Circular],
                  },
                  "_unrefed": false,
                  "msecs": 1000,
                  "nextTick": false,
                },
                "_idlePrev": [Circular],
                "_idleStart": 1015,
                "_idleTimeout": 1000,
                "_onTimeout": [Function],
                "_repeat": 1000,
                "_timerArgs": undefined,
                Symbol(asyncId): 49,
                Symbol(triggerId): 0,
              },
              "_idlePrev": [Circular],
              "_idleStart": 2944,
              "_idleTimeout": 1000,
              "_onTimeout": [Function],
              "_repeat": 1000,
              "_timerArgs": undefined,
              Symbol(asyncId): 138,
              Symbol(triggerId): 114,
            },
            "_idlePrev": [Circular],
            "_idleStart": 2948,
            "_idleTimeout": 1000,
            "_onTimeout": [Function],
            "_repeat": 1000,
            "_timerArgs": undefined,
            Symbol(asyncId): 143,
            Symbol(triggerId): 114,
          },
          "_idlePrev": TimersList {
            "_idleNext": [Circular],
            "_idlePrev": Timeout {
              "_called": false,
              "_destroyed": false,
              "_idleNext": [Circular],
              "_idlePrev": Timeout {
                "_called": false,
                "_destroyed": false,
                "_idleNext": [Circular],
                "_idlePrev": Timeout {
                  "_called": false,
                  "_destroyed": false,
                  "_idleNext": [Circular],
                  "_idlePrev": [Circular],
                  "_idleStart": 2948,
                  "_idleTimeout": 1000,
                  "_onTimeout": [Function],
                  "_repeat": 1000,
                  "_timerArgs": undefined,
                  Symbol(asyncId): 143,
                  Symbol(triggerId): 114,
                },
                "_idleStart": 2944,
                "_idleTimeout": 1000,
                "_onTimeout": [Function],
                "_repeat": 1000,
                "_timerArgs": undefined,
                Symbol(asyncId): 138,
                Symbol(triggerId): 114,
              },
              "_idleStart": 1015,
              "_idleTimeout": 1000,
              "_onTimeout": [Function],
              "_repeat": 1000,
              "_timerArgs": undefined,
              Symbol(asyncId): 49,
              Symbol(triggerId): 0,
            },
            "_timer": Timer {
              "0": [Function],
              "_list": [Circular],
            },
            "_unrefed": false,
            "msecs": 1000,
            "nextTick": false,
          },
          "_idleStart": 2953,
          "_idleTimeout": 1000,
          "_onTimeout": [Function],
          "_repeat": 1000,
          "_timerArgs": undefined,
          Symbol(asyncId): 150,
          Symbol(triggerId): 114,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
        "_debugID": 6,
        "_renderedOutput": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TimeElapsed
    start={true}
>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
    >
        10
    </Text>
</TimeElapsed>,
}
`;

exports[`TimeElapsed test componentWillReceiveProps to stop counting 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    secondsElapsed={0}
    start={true}
>
    10
</Text>,
  "nodes": Array [
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      secondsElapsed={0}
      start={true}
>
      10
</Text>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TimeElapsed
        start={true}
>
        <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
        >
                10
        </Text>
</TimeElapsed>,
      "_debugID": 7,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TimeElapsed {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "isCountingSeconds": false,
        "props": Object {
          "children": <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
>
            10
</Text>,
          "start": true,
        },
        "refs": Object {},
        "startCounting": [Function],
        "state": Object {
          "secondsElapsed": 0,
        },
        "stopCounting": [Function],
        "timer": Timeout {
          "0": null,
          "_called": false,
          "_destroyed": false,
          "_idleNext": null,
          "_idlePrev": null,
          "_idleStart": 2959,
          "_idleTimeout": -1,
          "_onTimeout": null,
          "_repeat": null,
          "_timerArgs": undefined,
          Symbol(asyncId): 155,
          Symbol(triggerId): 114,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
        "_debugID": 8,
        "_renderedOutput": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TimeElapsed
    start={true}
>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
    >
        10
    </Text>
</TimeElapsed>,
}
`;

exports[`TimeElapsed test componentWillUnmount 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    secondsElapsed={0}
    start={true}
>
    10
</Text>,
  "nodes": Array [
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      secondsElapsed={0}
      start={true}
>
      10
</Text>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TimeElapsed
        start={true}
>
        <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
        >
                10
        </Text>
</TimeElapsed>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TimeElapsed {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "isCountingSeconds": false,
        "props": Object {
          "children": <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
>
            10
</Text>,
          "start": true,
        },
        "refs": Object {},
        "startCounting": [Function],
        "state": Object {
          "secondsElapsed": 0,
        },
        "stopCounting": [Function],
        "timer": Timeout {
          "0": null,
          "_called": false,
          "_destroyed": false,
          "_idleNext": null,
          "_idlePrev": null,
          "_idleStart": 2948,
          "_idleTimeout": -1,
          "_onTimeout": null,
          "_repeat": null,
          "_timerArgs": undefined,
          Symbol(asyncId): 144,
          Symbol(triggerId): 114,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
        "_debugID": 4,
        "_renderedOutput": <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          secondsElapsed={0}
          start={true}
>
          10
</Text>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TimeElapsed
    start={true}
>
    <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
    >
        10
    </Text>
</TimeElapsed>,
}
`;
